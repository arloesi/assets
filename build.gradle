
apply plugin:"scala"
apply plugin:"eclipse"
apply plugin:"maven"

ext {
  scalaVersion = "2.9.3"
  testVersion = "2.0.M5b"
  groovyVersion = "2.1.2"
  junitVersion = "4.11"
  springVersion = "3.2.2.RELEASE"
  nekoVersion = "1.9.17"
  closureVersion = "v20130411"
}

repositories {
  mavenCentral()
}

dependencies {
  compile gradleApi()

  scalaTools group:"org.scala-lang", name:"scala-compiler", version:ext.scalaVersion
  compile group:"org.scala-lang", name:"scala-library", version:ext.scalaVersion

  compile group:"org.mozilla",name:"rhino",version:"1.6R7"
  compile group:"org.lesscss",name:"lesscss",version:"1.3.3"
  // compile group:"commons-codec",name:"commons-codec",version:"1.8"
  // compile group:"org.springframework", name:"spring-core", version:ext.springVersion
  // compile group:"net.sourceforge.nekohtml", name:"nekohtml", version:ext.nekoVersion
  compile group:"com.google.javascript",name:"closure-compiler",version:ext.closureVersion
  // compile group:"com.yahoo.platform.yui",name:"yuicompressor",version:"2.4.7"

  testCompile group:"junit",name:"junit",version:ext.junitVersion
  testCompile group:"org.scalatest",name:"scalatest_$scalaVersion",version:ext.testVersion
}

eclipse {
  classpath {
    downloadSources=true
    downloadJavadoc=true
  }
}

sourceSets {
  main {
    scala {
      srcDirs = ["src/main/scala"]
    }
  }

  test {
    scala {
      srcDirs = ["src/test/scala"]
    }

    resources {
      srcDirs = ["src/main/resources","src/test/resources"]
    }
  }
}

uploadArchives {
  repositories {
    mavenDeployer {
      repository(url:uri("../maven"))

      pom {
        groupId = "arloesi"
        artifactId = "assets"
        version = "0.1"
      }
    }
  }
}

task projects(dependsOn:["cleanEclipse","eclipseProject","eclipseClasspath"]) << {
}

ext.compile = { source, target, command, arguments,depends ->
  return task(target,type:Exec,dependsOn:depends) {
    inputs.file file("$projectDir/$source")
    outputs.dir file("$projectDir/build/$target")

    environment << System.getenv()
    commandLine command
    args arguments

    standardOutput = new ByteArrayOutputStream()

    doFirst {
      def file = new File("$projectDir/build/$target").getParentFile()
      file.mkdirs()
    }

    doLast {
      println standardOutput.toString()
    }
  }
}

compile("src/main/resources/assets/markup.coffee","markup.js","coffee",["-o","$projectDir/build","-c","$projectDir/src/main/resources/assets/markup.coffee"],[])
compile("build/markup.js","classes/main/assets/Markup.class","jsc",["-d","$projectDir/build/classes/main","-package","assets","-o","Markup","-opt","9","$projectDir/build/markup.js"],["markup.js"])
compile("src/main/resources/assets/coffee.js","classes/main/assets/Coffee.class","jsc",["-d","$projectDir/build/classes/main","-package","assets","-o","Coffee","-opt","9","$projectDir/src/main/resources/assets/coffee.js"],[])

tasks["compileJava"].dependsOn(["classes/main/assets/Coffee.class","classes/main/assets/Markup.class"])


